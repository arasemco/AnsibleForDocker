---
# Ansible Playbook to patch OpenSSH SHA1 vulnerability by removing SHA1 references from the configuration
#
# OpenSSH has deprecated SHA-1 due to known vulnerabilities, including susceptibility to collision attacks.
# This playbook ensures that SHA1 references are removed from the crypto policy to enhance security.
#
# This playbook performs the following actions:
# 1. Detects the target Linux distribution to determine the correct configuration file path.
# 2. Verifies if SHA1 is present in the configuration before making changes.
# 3. If SHA1 is detected, creates a backup of the configuration file.
# 4. Removes any references to "sha1" from the OpenSSH server configuration.
# 5. Validates that "sha1" has been removed.
# 6. Restarts the SSH service if modifications were made.
# 7. Rolls back changes and restores the backup if any issue occurs.

- name: Backup and remove SHA1 from OpenSSH server configuration (Cross-Distro)
  hosts: all
  become: yes
  vars:
    config_paths:
      RedHat: "/usr/share/crypto-policies/DEFAULT/opensshserver.txt"
      default: "/etc/ssh/sshd_config"
  tasks:
    - name: Detect Linux distribution family
      setup:
      register: system_info
      # Uses Ansible's setup module to gather system facts, including the distribution family

    - name: Set configuration file path
      set_fact:
        conf_path: "{{ config_paths[system_info.ansible_facts['ansible_os_family']] | default(config_paths['default']) }}"
      # Determines the appropriate configuration file path based on the OS family

    - name: Check if SHA1 is present in OpenSSH configuration
      command: grep -E 'sha1' "{{ conf_path }}"
      register: sha1_check_initial
      failed_when: false
      changed_when: false
      # Checks if "sha1" is present in the configuration before proceeding

    - name: Proceed only if SHA1 is detected
      block:
        - name: Generate backup file path
          stat:
            path: "{{ conf_path }}"
          register: conf_stat
          # Retrieves file statistics to get the checksum of the file for a unique backup name

        - name: Set backup file variable
          set_fact:
            conf_back: "{{ conf_path }}.{{ conf_stat.stat.checksum }}.bak"
          # Stores the backup file name with a unique hash-based suffix

        - name: Backup the config file
          copy:
            src: "{{ conf_path }}"
            dest: "{{ conf_back }}"
            remote_src: yes
            force: no
          # Creates a backup of the original configuration file before modifications

        - name: Remove SHA1 values from OpenSSH configuration
          replace:
            path: "{{ conf_path }}"
            regexp: ',?[^,]*sha1[^, ]*'
            replace: ''
          register: config_changed
          # Removes any references to "sha1" in the configuration file to mitigate security risks

        - name: Validate and restart SSH if configuration was modified
          block:
            - name: Validate that no SHA1 remains
              command: grep -E 'sha1' "{{ conf_path }}"
              register: sha1_check
              failed_when: sha1_check.rc == 0
              # Checks if "sha1" is still present in the configuration; fails if found

            - name: Restart SSH service
              service:
                name: sshd
                state: restarted
              when: config_changed.changed
              # Restarts SSH service only if changes were applied

          rescue:
            - name: Rollback - Restore the backup file
              copy:
                src: "{{ conf_back }}"
                dest: "{{ conf_path }}"
                remote_src: yes
              # Restores the original backup file if SSH restart fails

            - name: Restart SSH service after rollback
              service:
                name: sshd
                state: restarted
              # Ensures SSH service is running after restoration

        - name: Cleanup backup if no change was made
          file:
            path: "{{ conf_back }}"
            state: absent
          when: not config_changed.changed
          # Removes backup if no modifications were made

      when: sha1_check_initial.rc == 0
      # Ensures the block executes only if SHA1 is detected
