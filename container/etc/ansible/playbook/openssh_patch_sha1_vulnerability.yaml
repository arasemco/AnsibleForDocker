---
# Ansible Playbook to patch OpenSSH SHA1 vulnerability by removing SHA1 references from the configuration
#
# OpenSSH has deprecated SHA-1 due to known vulnerabilities, including susceptibility to collision attacks.
# This playbook ensures that SHA1 references are removed from the crypto policy to enhance security.
#
# This playbook performs the following actions:
# 1. Creates a backup of the configuration file before making any changes.
# 2. Removes any references to "sha1" from the crypto policy in OpenSSH server configuration.
# 3. Validates that "sha1" has been removed.
# 4. Restarts the SSH service if modifications were made.
# 5. Rolls back changes and restores the backup if any issue occurs.

- name: Backup and remove SHA1 from OpenSSH server configuration
  hosts: all
  become: yes
  vars:
    conf_path: "/usr/share/crypto-policies/DEFAULT/opensshserver.txt"

  tasks:
    - name: Generate backup file path based on hash
      stat:
        path: "{{ conf_path }}"
      register: conf_stat
      # Retrieves file statistics to get the checksum of the file for a unique backup name

    - name: Set backup file variable
      set_fact:
        conf_back: "{{ conf_path }}.{{ conf_stat.stat.checksum }}.bak"
      # Stores the backup file name with a unique hash-based suffix

    - name: Backup the config file if no backup exists
      copy:
        src: "{{ conf_path }}"
        dest: "{{ conf_back }}"
        remote_src: yes
        force: no
      # Creates a backup of the original configuration file before modifications

    - name: Remove SHA1 values from CRYPTO_POLICY in OpenSSH configuration
      replace:
        path: "{{ conf_path }}"
        regexp: ',?[^,]*sha1[^, ]*'
        replace: ''
      register: config_changed
      # Removes any references to "sha1" in the configuration file to mitigate security risks

    - name: Restart SSH service if configuration was modified
      block:
        - name: Validate that no SHA1 remains
          command: grep -E 'sha1' "{{ conf_path }}"
          register: sha1_check
          failed_when: sha1_check.rc == 0
          # Checks if "sha1" is still present in the configuration; fails if found

        - name: Attempt to restart SSH service
          service:
            name: sshd
            state: restarted
          register: ssh_restart
          when: config_changed.changed
          # Restarts SSH service only if changes were applied

      rescue:
        - name: Rollback - Restore the backup file
          copy:
            src: "{{ conf_back }}"
            dest: "{{ conf_path }}"
            remote_src: yes
          # Restores the original backup file if SSH restart fails

        - name: Delete the backup file if SSH restarted successfully
          file:
            path: "{{ conf_back }}"
            state: absent
          # Removes the backup file if the SSH service restart was successful

        - name: Restart SSH service after rollback
          service:
            name: sshd
            state: restarted
          # Ensures SSH service is running after restoration
