#!/bin/bash

# Set default values if not provided
USERNAME=${USERNAME:-ansible}
PASSWORD=${PASSWORD:-${USERNAME}}


# Path to the Ansible hosts file
HOSTS_FILE="container/etc/hosts"
ANSIBLE_HOSTS_FILE="container/etc/ansible/hosts"

# Initialize a new hosts file
echo "# Generated by update_hosts.sh" > "$HOSTS_FILE"
echo -e "127.0.0.1\tlocalhost" >> "$HOSTS_FILE"

# Initialize a new ansible hosts file
echo "# Generated by update_hosts.sh" > "$ANSIBLE_HOSTS_FILE"
echo "" >> "$ANSIBLE_HOSTS_FILE"

# Extract container names and parse groups
docker compose ps --format "{{.Names}}" | while read -r container_name
do
    # Skip empty lines
    [[ -z "$container_name" ]] && continue

    # Extract group from the second part of the container name
    group=$(echo "$container_name" | awk -F'-' '{print $2}')

    # Extract the container IP
    ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$container_name")

    # Add the group header if it's not already present
    if ! grep -q "^\[$group\]$" "$ANSIBLE_HOSTS_FILE"
    then echo -e "\n[$group]" >> "$ANSIBLE_HOSTS_FILE"
    fi

    # Add the container to the group with retrieved credentials
    echo "$container_name ansible_host=$ip" >> "$ANSIBLE_HOSTS_FILE"
    echo -e "$ip\t$container_name" >> "$HOSTS_FILE"
done

# Fallback values if username/password are not found
echo -e "\n\n[all:vars]" >> "$ANSIBLE_HOSTS_FILE"
echo -e "ansible_user=$USERNAME" >> "$ANSIBLE_HOSTS_FILE"
echo -e "ansible_ssh_pass=$PASSWORD" >> "$ANSIBLE_HOSTS_FILE"

# Print the updated hosts file
echo "Updated $ANSIBLE_HOSTS_FILE:"
cat "$ANSIBLE_HOSTS_FILE"
